# Request for Proposal

I need your help. PLEASE please create a Python GUI app with the following features:

## Home Page
- Displays a "Hello World" message that stays centered within the window when resized.

## Menu Bar
- A horizontal menu bar at the top that spans the width of the window and stays attached to the top edge when the window is resized.
- Contains links: Home, About, Register, Login, Profile, and Quit.
- Each link displays controls and content appropriate for the link name.

## Links and Their Functionality

### Home
- Shows the home page content in the area beneath the menu bar.

### About
- Displays an about page with an image of an attractive couple.

### Register
- Replaces any previous content with a layout of two form fields: "Email" and "Password", and a "Register" button.
- All elements have the same dimensions and are vertically aligned at the screen width center when the window is resized.
- Fields have validation logic applied whenever they lose focus:
  - Email must have the standard email format and be unique among all accounts stored locally.
  - Password must contain at least 8 characters, including 1 uppercase letter, 1 lowercase letter, 1 digit, and 1 special character.
  - Invalid fields are highlighted with a red border and have an error message positioned below each field.
- The "Register" button is disabled if either form field is blank or invalid.
- When the enabled button is clicked, the email and password values are used to create an account record with an immutable primary key.
- The account is stored in a local file-based data store that retains values after the app is terminated.

### Login
- Opens the same layout as the "Register" page but with a "Login" button replacing the "Register" button.
- Email and password fields have the same validation logic.
- The "Login" button is disabled until both fields are non-blank and valid.
- When the enabled "Login" button is clicked:
  - An error message is shown if no account with matching email/login is found in the local account store.
  - If login is unsuccessful, a message is displayed informing if the email and/or the password is not valid or does not match a stored account.
  - If both email and password match a stored account, the "Login" page is replaced by the "Profile" page.

### Profile
- Has the same layout as the "Register" and "Login" pages, except it has a "Save Profile" button.
- Email and Password fields are editable and subject to the same validation rules.
- Accounts are indexed by an immutable primary key, so email and password can be modified at any time.
- The fields are marked as invalid if the email address is not unique.
- If both fields are valid and either field is altered, the "Save Profile" button is enabled.

### Quit
- Closes the application.

## Packaging
- The application will be packaged as a single standalone packaged application with an icon.
- An application installer can be downloaded from the web.
- When opened, the installer installs an executable package that encapsulates the application's files.
- Any installation errors are messaged to the user.
- The application package can be moved or copied to the user's Applications folder.
- Wherever the package is located, deleting it from the system's File Explorer deletes all code and data files without fanfare.

## Time and Effort
- What is the approximate time and effort needed to create this packaged app and make it ready for user acceptance testing?